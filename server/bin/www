#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('codewithme:server');
var http = require('http');
var {generateRoom} = require("../generate-room")
var tempdb = require('../tempdb');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

var socketIO = require('socket.io');
//var server = require('./bin/www');
var io = socketIO(server);

io.on('connection', function (socket) {
    console.log('New user connected');
    // console.log(socket)  
    // var id = generateRoom()
    // socket.emit('userId', id)

    

    socket.on("create_room", (data) => {
      socket.join(data)
    })
    
    socket.on("code_updated", (data) => {
      console.log('socket received on server',data)
      //console.log(data)
      // socket.broadcast.emit("process code", {data})
      // socket.broadcast.to(data.roomId).emit("process code", {data}) 
      // var datadb = tempdb.getData(data.roomId);
      // if (datadb){
      //   socket.broadcast.to(data.roomId).emit("process code", { datadb })        
      // } 
      // else{
        socket.broadcast.to(data.roomId).emit("process code",{data})
      // }  
      })       

    socket.on('disconnect', function () {
        console.log('User disconnected');
    })
});


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('Starting App')
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server;